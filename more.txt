
import os
import re
import io
import sys
import time
import json
import shutil
import ctypes
import random
import zipfile
import requests
import threading
import subprocess
import pylibcheck
import os
import random
import shutil
import subprocess
import sys
import time
from json import load
from urllib.request import urlopen
from zlib import compress
from pystyle import *
from time import sleep
from bs4 import BeautifulSoup
from distutils.version import LooseVersion
from urllib.request import urlopen, urlretrieve
from multiprocessing.spawn import spawn_main
from pystyle import Add, Center, Anime, Colors, Colorate, Write, System
import requests, os, sys, re, time, random, os.path, string, subprocess, random, threading, ctypes, shutil

from utilities.Settings.needed import api

import sys
import time
import platform
import os
import hashlib
from time import sleep
from datetime import datetime
import webbrowser

import getpass
username = getpass.getuser()

System.Size(120, 30)
THIS_VERSION = "2.1.1"


def getchecksum():
    md5_hash = hashlib.md5()
    file = open(''.join(sys.argv), "rb")
    md5_hash.update(file.read())
    digest = md5_hash.hexdigest()
    return digest



keyauthapp = api(
    name = "blasted", #App name (Manage Applications --> Application name)
    ownerid = "0aFEoXwOdt", #Owner ID (Account-Settings --> OwnerID)
    secret = "32f8c356757c9b8712de0bbcba1b0a8f00b7f7e5e7569941b38f52068eae8d1a", #App secret(Manage Applications --> App credentials code)
    version = "1.0",
    hash_to_check = getchecksum()
)


######################################################### MENU
x = "data/ignore/color.txt"
if os.path.exists(x):
    with open('data/ignore/color.txt', 'r')as file:
        for line in file:
            if "Colors.blue_to_cyan" in line:
                custom = Colors.blue_to_cyan
            if "Colors.blue_to_green" in line:
                custom = Colors.blue_to_green
            if "Colors.blue_to_purple" in line:
                custom = Colors.blue_to_purple
            if "Colors.blue_to_white" in line:
                custom = Colors.blue_to_white
            if "Colors.red_to_green" in line:
                custom = Colors.red_to_green
            if "Colors.red_to_purple" in line:
                custom = Colors.red_to_purple
            if "Colors.red_to_white" in line:
                custom = Colors.red_to_white
            if "Colors.red_to_yellow" in line:
                custom = Colors.red_to_yellow
            if "Colors.green_to_yellow" in line:
                custom = Colors.green_to_yellow
            if "Colors.cyan_to_blue" in line:
                custom = Colors.cyan_to_blue
            if "Colors.cyan_to_green" in line:
                custom = Colors.cyan_to_green

calword_login = f'''
                  


 ▄▄·  ▄▄▄· ▄▄▌  ▄▄▌ ▐ ▄▌      ▄▄▄  ·▄▄▄▄
▐█ ▌▪▐█ ▀█ ██•  ██· █▌▐█▪     ▀▄ █·██▪ ██
██ ▄▄▄█▀▀█ ██▪  ██▪▐█▐▐▌ ▄█▀▄ ▐▀▀▄ ▐█· ▐█▌
▐███▌▐█ ▪▐▌▐█▌▐▌▐█▌██▐█▌▐█▌.▐▌▐█•█▌██. ██
·▀▀▀  ▀  ▀ .▀▀▀  ▀▀▀▀ ▀▪ ▀█▄▀▪.▀  ▀▀▀▀▀▀•
╭╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╮
╽                WELCOME                ╿
╰╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╯
 ╭╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╮
 ╽ [01] To Login                       ╿
 ╽ [02] To Register                    ╿
 ╰╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╯
╭╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╮
╽                CALWORD                ╿
╰╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╯
 ╭╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╮
 ╽ calword.lol                         ╿
 ╽ discord.gg/calword                  ╿
 ╰╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╯'''
print(Colorate.Horizontal(custom, Center.XCenter(calword_login)))

######################################################### ANSWER

def answer():
    try:
        ans = Write.Input(f"                                        [calword@{username}] <~> ", custom, interval=0.000)
        if ans == "1":
            user = Write.Input("                                        [calword@username] <~> ", custom, interval=0.000)
            password = Write.Input("                                        [calword@password] <~> ", custom, interval=0.000)
            keyauthapp.login(user, password)
        elif ans == "2":
            user = Write.Input("                                        [calword@username] <~> ", custom, interval=0.000)
            password = Write.Input("                                        [calword@password] <~> ", custom, interval=0.000)
            license = Write.Input("                                        [calword@license] <~> ", custom, interval=0.000)
            keyauthapp.register(user, password, license)
        else:
            Write.Print("                                        [calword@error] </> Not Valid Option", custom, interval=0.000)
            time.sleep(1.5)
            exit(1)
    except KeyboardInterrupt:
        exit(2)
answer()

######################################################### ANSWER
google_target_ver = 0
edge_target_ver = 0

counttokens = len(open('data/files/input/tokens.txt').readlines())

def setTitle(_str):
    system = os.name
    if system == 'nt':
        ctypes.windll.kernel32.SetConsoleTitleW(f"Calword Multitool | calword.lol | discord.gg/calword | Tokens Found: {counttokens}")
    elif system == 'posix':
        sys.stdout.write(f"Calword Multitool | calword.lol | discord.gg/calword | Tokens Found: {counttokens}")
    else:
        pass
    
setTitle(f"Calword Multitool | calword.lol | discord.gg/calword | Tokens Found: {counttokens}")

def calwordLIST():
  os.system('cls' if os.name=='nt' else 'clear')
  global yeslist
  yeslist = ["yes", "y", "yer", "yeah","yessir","ye","okay","yep","yea","ok","k","yh","sure"]
######################################## CHROME DRIVER
class Chrome_Installer(object):
    installed = False
    target_version = None
    DL_BASE = "https://chromedriver.storage.googleapis.com/"

    def __init__(self, executable_path=None, target_version=None, *args, **kwargs):
        self.platform = sys.platform

        if google_target_ver:
            self.target_version = google_target_ver

        if target_version:
            self.target_version = target_version

        if not self.target_version:
            self.target_version = self.get_release_version_number().version[0]

        self._base = base_ = "chromedriver"

        exe_name = self._base
        if self.platform in ("win32",):
            exe_name = base_.format(".exe")
        if self.platform in ("linux",):
            self.platform += "64"
            exe_name = exe_name.format("")
        if self.platform in ("darwin",):
            self.platform = "mac64"
            exe_name = exe_name.format("")
        self.executable_path = executable_path or exe_name
        self._exe_name = exe_name

        if not os.path.exists(self.executable_path):
            self.fetch_chromedriver()
            if not self.__class__.installed:
                if self.patch_binary():
                    self.__class__.installed = True

    @staticmethod
    def random_cdc():
        cdc = random.choices('abcdefghijklmnopqrstuvwxyz', k=26)
        cdc[-6:-4] = map(str.upper, cdc[-6:-4])
        cdc[2] = cdc[0]
        cdc[3] = "_"
        return "".join(cdc).encode()

    def patch_binary(self):
        linect = 0
        replacement = self.random_cdc()
        with io.open(self.executable_path, "r+b") as fh:
            for line in iter(lambda: fh.readline(), b""):
                if b"cdc_" in line:
                    fh.seek(-len(line), 1)
                    newline = re.sub(b"cdc_.{22}", replacement, line)
                    fh.write(newline)
                    linect += 1
            return linect

    def get_release_version_number(self):
        path = (
            "LATEST_RELEASE"
            if not self.target_version
            else f"LATEST_RELEASE_{self.target_version}"
        )
        return LooseVersion(urlopen(self.__class__.DL_BASE + path).read().decode())

    def fetch_chromedriver(self):
        base_ = self._base
        zip_name = base_.format(".zip")
        ver = self.get_release_version_number().vstring
        if os.path.exists(self.executable_path):
            return self.executable_path
        urlretrieve(
            f"{self.__class__.DL_BASE}{ver}/{base_.format(f'_{self.platform}')}.zip",
            filename=zip_name,
        )
        with zipfile.ZipFile(zip_name) as zf:
            zf.extract(self._exe_name)
        os.remove(zip_name)
        if sys.platform != "win32":
            os.chmod(self._exe_name, 0o755)
        return self._exe_name
######################################## EDGE DRIVER
class Edge_Installer(object):
    installed = False
    target_version = None
    DL_BASE = "https://msedgedriver.azureedge.net/"

    def __init__(self, executable_path=None, target_version=None, *args, **kwargs):
        self.platform = sys.platform

        if edge_target_ver:
            self.target_version = edge_target_ver

        if target_version:
            self.target_version = target_version

        if not self.target_version:
            self.target_version = self.get_release_version_number().version[0]

        self._base = base_ = "edgedriver{}"

        exe_name = self._base
        if self.platform in ("win32",):
            exe_name = base_.format(".exe")
        if self.platform in ("linux",):
            self.platform += "64"
            exe_name = exe_name.format("")
        if self.platform in ("darwin",):
            self.platform = "mac64"
            exe_name = exe_name.format("")
        self.executable_path = executable_path or exe_name
        self._exe_name = exe_name

        if not os.path.exists(self.executable_path):
            self.fetch_edgedriver()
            if not self.__class__.installed:
                if self.patch_binary():
                    self.__class__.installed = True

    @staticmethod
    def random_cdc():
        cdc = random.choices('abcdefghijklmnopqrstuvwxyz', k=26)
        cdc[-6:-4] = map(str.upper, cdc[-6:-4])
        cdc[2] = cdc[0]
        cdc[3] = "_"
        return "".join(cdc).encode()

    def patch_binary(self):
        linect = 0
        replacement = self.random_cdc()
        with io.open("ms"+self.executable_path, "r+b") as fh:
            for line in iter(lambda: fh.readline(), b""):
                if b"cdc_" in line:
                    fh.seek(-len(line), 1)
                    newline = re.sub(b"cdc_.{22}", replacement, line)
                    fh.write(newline)
                    linect += 1
            return linect


    def get_release_version_number(self):
        path = (
            "LATEST_STABLE"
            if not self.target_version
            else f"LATEST_RELEASE_{str(self.target_version).split('.', 1)[0]}"
        )
        urlretrieve(
            f"{self.__class__.DL_BASE}{path}",
            filename=f"{getTempDir()}\\{path}",
        )
        with open(f"{getTempDir()}\\{path}", "r+") as f:
            _file = f.read().strip("\n")
            content = ""
            for char in [x for x in _file]:
                for num in ("0","1","2","3","4","5","6","7","8","9","."):
                    if char == num:
                        content += char
        return LooseVersion(content)

    def fetch_edgedriver(self):
        base_ = self._base
        zip_name = base_.format(".zip")
        ver = self.get_release_version_number().vstring
        if os.path.exists(self.executable_path):
            return self.executable_path
        urlretrieve(
            f"{self.__class__.DL_BASE}{ver}/{base_.format(f'_{self.platform}')}.zip",
            filename=zip_name,
        )
        with zipfile.ZipFile(zip_name) as zf:
            zf.extract("ms"+self._exe_name)
        os.remove(zip_name)
        if sys.platform != "win32":
            os.chmod(self._exe_name, 0o755)
        return self._exe_name
######################################## OPERA DRIVER
class Opera_Installer(object):
    DL_BASE = "https://github.com"
    def __init__(self, *args, **kwargs):
        self.platform = sys.platform
        self.links = ""

        r = requests.get(self.__class__.DL_BASE+"/operasoftware/operachromiumdriver/releases")
        soup = BeautifulSoup(r.text, 'html.parser')
        for link in soup.find_all('a'):
            if "operadriver" in link.get('href'):
                self.links += f"{link.get('href')}\n"

        for i in self.links.split("\n")[:4]:
            if self.platform in i:
                self.fetch_edgedriver(i)

    def fetch_edgedriver(self, driver):
        executable = "operadriver.exe"
        driver_name = driver.split("/")[-1]
        cwd = os.getcwd() + os.sep

        urlretrieve(self.__class__.DL_BASE+driver, filename=driver_name)
        with zipfile.ZipFile(driver_name) as zf:
            zf.extractall()
        shutil.move(cwd+driver_name[:-4]+os.sep+executable, cwd+executable)
        os.remove(driver_name)
        shutil.rmtree(driver_name[:-4])
######################################## GET DRIVER
def getDriver():
    drivers = ["chromedriver.exe", "msedgedriver.exe", "operadriver.exe"]
    Write.Print(f'          [calword@drivers] </> Checking for ChromeDriver...', custom, interval=0.000)
    sleep(0.5)
    for driver in drivers:
        if os.path.exists(os.getcwd() + os.sep + driver):
            Write.Print(f'\n          [calword@drivers] </> ChromeDriver is Already Installed...', custom, interval=0.000)
            sleep(0.5)
            return driver
    else:
        Write.Print(f'\n          [calword@tokens] </> All Tokens have been Checked!', custom, interval=0.000)
        if os.path.exists(os.getenv('localappdata') + '\\Google'):
            Chrome_Installer()
            Write.Print(f'          [calword@drivers] </> Checking for ChromeDriver...', custom, interval=0.000)
            return "chromedriver.exe"
        elif os.path.exists(os.getenv('appdata') + '\\Opera Software\\Opera Stable'):
            Opera_Installer()
            Write.Print(f'\n          [calword@drivers] </> OperaDriver.exe Has Been Installed Successfully!', custom, interval=0.000)
            return "operadriver.exe"
        elif os.path.exists(os.getenv('localappdata') + '\\Microsoft\\Edge'):
            Edge_Installer()
            Write.Print(f'\n          [calword@drivers] </> MsedgeDriver.exe Has Been Installed Successfully!', custom, interval=0.000)
            return "msedgedriver.exe"
        else:
            Write.Print(f'\n          [calword@error] </> No Compatible Driver Found... Proceeding with ChromeDriver!', custom, interval=0.000)
            Chrome_Installer()
            Write.Print(f'\n          [calword@error] </> Trying ChromeDriver.exe', custom, interval=0.000)
            return "chromedriver.exe"
######################################## GET CLEAR
def clear():
    system = os.name
    if system == 'nt':
        os.system('cls')
    elif system == 'posix':
        os.system('clear')
    else:
        print('\n'*120)
    return
######################################## GET TRANSITION
def transition():
    clear()
######################################## GET SLOWPRINT
def SlowPrint(_str):
    for letter in _str:
        sys.stdout.write(letter);sys.stdout.flush();sleep(0.04)
######################################## GET TEMPDIR
def getTempDir():
    system = os.name
    if system == 'nt':
        return os.getenv('temp')
    elif system == 'posix':
        return '/tmp/'
######################################## GET TOKEN VALIDATOR
def validateToken(token):
    '''validate the token by contacting the discord api'''
    base_url = "https://discord.com/api/v9/users/@me"
    message = "          [calword@info] </> Please Verify Token!"

    r = requests.get(base_url, headers=getheaders(token))
    if r.status_code != 200:
        Write.Print(f"\n          [calword@token] </> Invalid Token!", custom, interval=0.000)
        sleep(1)
        __import__("spammer").main()
    j = requests.get(f'{base_url}/billing/subscriptions', headers=getheaders(token)).json()
    try:
        if j["message"] == message:
            Write.Print(f"\n          [calword@phone] </> Phone Locked Token!", custom, interval=0.000)
            sleep(1)
            __import__("spammer").main()
    except (KeyError, TypeError, IndexError):
        pass

def validateWebhook(hook):
    if not "api/webhooks" in hook:
        Write.Print(f"\n          [calword@webhook] </> Invalid Webhook!", custom, interval=0.000)
        sleep(1)
        __import__("spammer").main()
    try:
        responce = requests.get(hook)
    except (requests.exceptions.MissingSchema, requests.exceptions.InvalidSchema, requests.exceptions.ConnectionError):
        Write.Print(f"\n          [calword@webhook] </> Invalid Webhook!", custom, interval=0.000)
        sleep(1)
        __import__("spammer").main()
    try:
        j = responce.json()["name"]
    except (KeyError, json.decoder.JSONDecodeError):
        Write.Print(f"\n          [calword@webhook] </> Invalid Webhook!", custom, interval=0.000)
        sleep(1)
        __import__("spammer").main()
    Write.Print(f"      [calword@webhook] </> Valid webhook! {j}", custom, interval=0.000)

def installPackage(dependencies):
    Write.Print(f'')
    if sys.argv[0].endswith('.exe'):
            reqs = subprocess.check_output(['python', '-m', 'pip', 'freeze'])
            installed_packages = [r.decode().split('==')[0].lower() for r in reqs.split()]

            for lib in dependencies:
                if lib not in installed_packages:
                    Write.Print(f"          [calword@error] </> Installing it for", custom, interval=0.000)
                    try:
                        subprocess.check_call(['python', '-m', 'pip', 'install', lib])
                    except Exception as e:
                        Write.Print(f"          [calword@error] </> {e}", custom, interval=0.000)
                        sleep(0.5)
                        pass
    else:
        for i in dependencies:
            if not pylibcheck.checkPackage(i):
                Write.Print(f"          [calword@error] </> Installing it for", custom, interval=0.000)
                pylibcheck.installPackage(i)

items = list(range(0, 37))
l = len(items)


heads = [
    {
        "Content-Type": "application/json",
        'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; rv:76.0) Gecko/20100101 Firefox/76.0'
    },

    {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:72.0) Gecko/20100101 Firefox/72.0"
    },

    {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (X11; Debian; Linux x86_64; rv:72.0) Gecko/20100101 Firefox/72.0"
    },

    {
        "Content-Type": "application/json",
        'User-Agent': 'Mozilla/5.0 (Windows NT 3.1; rv:76.0) Gecko/20100101 Firefox/69.0'
    },

    {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (X11; Debian; Linux x86_64; rv:72.0) Gecko/20100101 Firefox/76.0"
    },

    {
       "Content-Type": "application/json",
       "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11"
    }
]

def getheaders(token=None):
    headers = random.choice(heads)
    if token:
        headers.update({"Authorization": token})
    return headers
time.sleep(3)
banner = r'''
  ▄▄·  ▄▄▄· ▄▄▌  ▄▄▌ ▐ ▄▌      ▄▄▄  ·▄▄▄▄  
 ▐█ ▌▪▐█ ▀█ ██•  ██· █▌▐█▪     ▀▄ █·██▪ ██ 
 ██ ▄▄▄█▀▀█ ██▪  ██▪▐█▐▐▌ ▄█▀▄ ▐▀▀▄ ▐█· ▐█▌
 ▐███▌▐█ ▪▐▌▐█▌▐▌▐█▌██▐█▌▐█▌.▐▌▐█•█▌██. ██ 
 ·▀▀▀  ▀  ▀ .▀▀▀  ▀▀▀▀ ▀▪ ▀█▄▀▪.▀  ▀▀▀▀▀▀•  
 ╭╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╾╮
 ╽ Thank you for support / Press "Enter" ╿ 
 ╰╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╼╯
'''
System.Size(120, 30)
System.Clear()
Anime.Fade(Center.Center(banner), custom, Colorate.Vertical, interval=0.030, enter=True)
